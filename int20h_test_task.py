# -*- coding: utf-8 -*-
"""INT20H_test_task.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1joph7YMTcamUg_z72ZDT1eqsf6UPQko-
"""

import pandas as pd 
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.impute import KNNImputer
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, VotingClassifier, StackingClassifier
from sklearn.neural_network import MLPClassifier
from sklearn.svm import SVC
from sklearn.metrics import precision_score, recall_score, f1_score, roc_auc_score, classification_report
from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV
from sklearn.preprocessing import MinMaxScaler
from imblearn.over_sampling import ADASYN

from google.colab import files
data_to_load = files.upload()

df_train = pd.read_csv('train.csv')
df_test = pd.read_csv('test.csv')

ID = df_test.Id

df_train.info()

is_NaN = df_train.isnull()
row_has_NaN = is_NaN.any(axis=1)
rows_with_NaN = df_train[row_has_NaN]

sns.countplot(rows_with_NaN.target)

knn_im = KNNImputer()
df_train = pd.DataFrame(knn_im.fit_transform(df_train),columns = df_train.columns)
df_test = pd.DataFrame(knn_im.fit_transform(df_test),columns = df_test.columns)

rf = RandomForestClassifier(class_weight='balanced', random_state=42)

gb = GradientBoostingClassifier(n_estimators=300, warm_start=True, random_state=42)

X = df_train.drop('target', axis=1)
y = df_train.target

X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size=0.3)

model_def = rf.fit(X_train, y_train)
precision_score(model_def.predict(X_test), y_test), recall_score(model_def.predict(X_test), y_test), f1_score(model_def.predict(X_test), y_test)

ada = ADASYN()
X_ada, y_ada = ada.fit_resample(X,y)

X_train_ada, X_test_ada, y_train_ada, y_test_ada = train_test_split(X_ada,y_ada, test_size=0.3)

model_ada = rf.fit(X_train_ada, y_train_ada)
precision_score(model_ada.predict(X_test_ada), y_test_ada), recall_score(model_ada.predict(X_test_ada), y_test_ada), f1_score(model_ada.predict(X_test_ada), y_test_ada)

model_gb = gb.fit(X_train_ada, y_train_ada)
precision_score(model_gb.predict(X_test_ada), y_test_ada), recall_score(model_gb.predict(X_test_ada), y_test_ada), f1_score(model_gb.predict(X_test_ada), y_test_ada)

sample_sub = pd.DataFrame({'Id': ID, 'Predicted': model_gb.predict(df_test)}).astype('int64')
sample_sub = sample_sub.groupby('Id').agg({'Predicted': 'max'})
sample_sub.to_csv('tuned_gb_adasyn_1.csv')

sample_sub = pd.DataFrame({'Id': ID, 'Predicted': model_rf.predict(df_test)}).astype('int64')
sample_sub = sample_sub.groupby('Id').agg({'Predicted': 'max'})
sample_sub.to_csv('tuned_rf_adasyn_1.csv')